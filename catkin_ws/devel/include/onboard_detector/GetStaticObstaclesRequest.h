// Generated by gencpp from file onboard_detector/GetStaticObstaclesRequest.msg
// DO NOT EDIT!


#ifndef ONBOARD_DETECTOR_MESSAGE_GETSTATICOBSTACLESREQUEST_H
#define ONBOARD_DETECTOR_MESSAGE_GETSTATICOBSTACLESREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace onboard_detector
{
template <class ContainerAllocator>
struct GetStaticObstaclesRequest_
{
  typedef GetStaticObstaclesRequest_<ContainerAllocator> Type;

  GetStaticObstaclesRequest_()
    : current_position()
    , range(0.0)
    , semantic_filter()  {
    }
  GetStaticObstaclesRequest_(const ContainerAllocator& _alloc)
    : current_position(_alloc)
    , range(0.0)
    , semantic_filter(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _current_position_type;
  _current_position_type current_position;

   typedef double _range_type;
  _range_type range;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _semantic_filter_type;
  _semantic_filter_type semantic_filter;





  typedef boost::shared_ptr< ::onboard_detector::GetStaticObstaclesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::onboard_detector::GetStaticObstaclesRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetStaticObstaclesRequest_

typedef ::onboard_detector::GetStaticObstaclesRequest_<std::allocator<void> > GetStaticObstaclesRequest;

typedef boost::shared_ptr< ::onboard_detector::GetStaticObstaclesRequest > GetStaticObstaclesRequestPtr;
typedef boost::shared_ptr< ::onboard_detector::GetStaticObstaclesRequest const> GetStaticObstaclesRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::onboard_detector::GetStaticObstaclesRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::onboard_detector::GetStaticObstaclesRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::onboard_detector::GetStaticObstaclesRequest_<ContainerAllocator1> & lhs, const ::onboard_detector::GetStaticObstaclesRequest_<ContainerAllocator2> & rhs)
{
  return lhs.current_position == rhs.current_position &&
    lhs.range == rhs.range &&
    lhs.semantic_filter == rhs.semantic_filter;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::onboard_detector::GetStaticObstaclesRequest_<ContainerAllocator1> & lhs, const ::onboard_detector::GetStaticObstaclesRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace onboard_detector

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::onboard_detector::GetStaticObstaclesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::onboard_detector::GetStaticObstaclesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::onboard_detector::GetStaticObstaclesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::onboard_detector::GetStaticObstaclesRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::onboard_detector::GetStaticObstaclesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::onboard_detector::GetStaticObstaclesRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::onboard_detector::GetStaticObstaclesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "feeefa6eaed2d913d83da97e14fa99bc";
  }

  static const char* value(const ::onboard_detector::GetStaticObstaclesRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfeeefa6eaed2d913ULL;
  static const uint64_t static_value2 = 0xd83da97e14fa99bcULL;
};

template<class ContainerAllocator>
struct DataType< ::onboard_detector::GetStaticObstaclesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "onboard_detector/GetStaticObstaclesRequest";
  }

  static const char* value(const ::onboard_detector::GetStaticObstaclesRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::onboard_detector::GetStaticObstaclesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Request\n"
"geometry_msgs/Point current_position\n"
"float64 range\n"
"string semantic_filter  # Optional filter by semantic class (e.g., \"WALL\", \"FURNITURE\", empty for all)\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::onboard_detector::GetStaticObstaclesRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::onboard_detector::GetStaticObstaclesRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current_position);
      stream.next(m.range);
      stream.next(m.semantic_filter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetStaticObstaclesRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::onboard_detector::GetStaticObstaclesRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::onboard_detector::GetStaticObstaclesRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "current_position: ";
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.current_position);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "range: ";
    Printer<double>::stream(s, indent + "  ", v.range);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "semantic_filter: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.semantic_filter);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ONBOARD_DETECTOR_MESSAGE_GETSTATICOBSTACLESREQUEST_H
