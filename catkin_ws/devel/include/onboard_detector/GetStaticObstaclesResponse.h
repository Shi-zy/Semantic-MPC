// Generated by gencpp from file onboard_detector/GetStaticObstaclesResponse.msg
// DO NOT EDIT!


#ifndef ONBOARD_DETECTOR_MESSAGE_GETSTATICOBSTACLESRESPONSE_H
#define ONBOARD_DETECTOR_MESSAGE_GETSTATICOBSTACLESRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace onboard_detector
{
template <class ContainerAllocator>
struct GetStaticObstaclesResponse_
{
  typedef GetStaticObstaclesResponse_<ContainerAllocator> Type;

  GetStaticObstaclesResponse_()
    : names()
    , ids()
    , positions()
    , sizes()
    , yaws()
    , semantic_classes()
    , cost_weights()
    , safety_distances()  {
    }
  GetStaticObstaclesResponse_(const ContainerAllocator& _alloc)
    : names(_alloc)
    , ids(_alloc)
    , positions(_alloc)
    , sizes(_alloc)
    , yaws(_alloc)
    , semantic_classes(_alloc)
    , cost_weights(_alloc)
    , safety_distances(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _names_type;
  _names_type names;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _ids_type;
  _ids_type ids;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Vector3_<ContainerAllocator> >> _positions_type;
  _positions_type positions;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Vector3_<ContainerAllocator> >> _sizes_type;
  _sizes_type sizes;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _yaws_type;
  _yaws_type yaws;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _semantic_classes_type;
  _semantic_classes_type semantic_classes;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _cost_weights_type;
  _cost_weights_type cost_weights;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _safety_distances_type;
  _safety_distances_type safety_distances;





  typedef boost::shared_ptr< ::onboard_detector::GetStaticObstaclesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::onboard_detector::GetStaticObstaclesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetStaticObstaclesResponse_

typedef ::onboard_detector::GetStaticObstaclesResponse_<std::allocator<void> > GetStaticObstaclesResponse;

typedef boost::shared_ptr< ::onboard_detector::GetStaticObstaclesResponse > GetStaticObstaclesResponsePtr;
typedef boost::shared_ptr< ::onboard_detector::GetStaticObstaclesResponse const> GetStaticObstaclesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::onboard_detector::GetStaticObstaclesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::onboard_detector::GetStaticObstaclesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::onboard_detector::GetStaticObstaclesResponse_<ContainerAllocator1> & lhs, const ::onboard_detector::GetStaticObstaclesResponse_<ContainerAllocator2> & rhs)
{
  return lhs.names == rhs.names &&
    lhs.ids == rhs.ids &&
    lhs.positions == rhs.positions &&
    lhs.sizes == rhs.sizes &&
    lhs.yaws == rhs.yaws &&
    lhs.semantic_classes == rhs.semantic_classes &&
    lhs.cost_weights == rhs.cost_weights &&
    lhs.safety_distances == rhs.safety_distances;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::onboard_detector::GetStaticObstaclesResponse_<ContainerAllocator1> & lhs, const ::onboard_detector::GetStaticObstaclesResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace onboard_detector

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::onboard_detector::GetStaticObstaclesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::onboard_detector::GetStaticObstaclesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::onboard_detector::GetStaticObstaclesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::onboard_detector::GetStaticObstaclesResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::onboard_detector::GetStaticObstaclesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::onboard_detector::GetStaticObstaclesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::onboard_detector::GetStaticObstaclesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "496591114641469de96e821019d3d5c3";
  }

  static const char* value(const ::onboard_detector::GetStaticObstaclesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x496591114641469dULL;
  static const uint64_t static_value2 = 0xe96e821019d3d5c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::onboard_detector::GetStaticObstaclesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "onboard_detector/GetStaticObstaclesResponse";
  }

  static const char* value(const ::onboard_detector::GetStaticObstaclesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::onboard_detector::GetStaticObstaclesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Response\n"
"# Array of static obstacles using standard ROS messages\n"
"string[] names\n"
"uint32[] ids\n"
"geometry_msgs/Vector3[] positions\n"
"geometry_msgs/Vector3[] sizes\n"
"float64[] yaws\n"
"string[] semantic_classes\n"
"float64[] cost_weights\n"
"float64[] safety_distances \n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::onboard_detector::GetStaticObstaclesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::onboard_detector::GetStaticObstaclesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.names);
      stream.next(m.ids);
      stream.next(m.positions);
      stream.next(m.sizes);
      stream.next(m.yaws);
      stream.next(m.semantic_classes);
      stream.next(m.cost_weights);
      stream.next(m.safety_distances);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetStaticObstaclesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::onboard_detector::GetStaticObstaclesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::onboard_detector::GetStaticObstaclesResponse_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "names: ";
    if (v.names.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.names.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, true ? std::string() : indent + "    ", v.names[i]);
    }
    if (v.names.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ids: ";
    if (v.ids.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.ids.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<uint32_t>::stream(s, true ? std::string() : indent + "    ", v.ids[i]);
    }
    if (v.ids.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "positions: ";
    if (v.positions.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.positions.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.positions[i]);
    }
    if (v.positions.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "sizes: ";
    if (v.sizes.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.sizes.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.sizes[i]);
    }
    if (v.sizes.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "yaws: ";
    if (v.yaws.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.yaws.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.yaws[i]);
    }
    if (v.yaws.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "semantic_classes: ";
    if (v.semantic_classes.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.semantic_classes.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, true ? std::string() : indent + "    ", v.semantic_classes[i]);
    }
    if (v.semantic_classes.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cost_weights: ";
    if (v.cost_weights.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.cost_weights.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.cost_weights[i]);
    }
    if (v.cost_weights.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "safety_distances: ";
    if (v.safety_distances.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.safety_distances.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.safety_distances[i]);
    }
    if (v.safety_distances.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // ONBOARD_DETECTOR_MESSAGE_GETSTATICOBSTACLESRESPONSE_H
