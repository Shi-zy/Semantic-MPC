// Generated by gencpp from file map_manager/StaticObstacle.msg
// DO NOT EDIT!


#ifndef MAP_MANAGER_MESSAGE_STATICOBSTACLE_H
#define MAP_MANAGER_MESSAGE_STATICOBSTACLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <std_msgs/ColorRGBA.h>

namespace map_manager
{
template <class ContainerAllocator>
struct StaticObstacle_
{
  typedef StaticObstacle_<ContainerAllocator> Type;

  StaticObstacle_()
    : header()
    , name()
    , id(0)
    , position()
    , size()
    , yaw(0.0)
    , semantic_class()
    , cost_weight(0.0)
    , safety_distance(0.0)
    , color()  {
    }
  StaticObstacle_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name(_alloc)
    , id(0)
    , position(_alloc)
    , size(_alloc)
    , yaw(0.0)
    , semantic_class(_alloc)
    , cost_weight(0.0)
    , safety_distance(0.0)
    , color(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef uint32_t _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _size_type;
  _size_type size;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _semantic_class_type;
  _semantic_class_type semantic_class;

   typedef double _cost_weight_type;
  _cost_weight_type cost_weight;

   typedef double _safety_distance_type;
  _safety_distance_type safety_distance;

   typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _color_type;
  _color_type color;





  typedef boost::shared_ptr< ::map_manager::StaticObstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::map_manager::StaticObstacle_<ContainerAllocator> const> ConstPtr;

}; // struct StaticObstacle_

typedef ::map_manager::StaticObstacle_<std::allocator<void> > StaticObstacle;

typedef boost::shared_ptr< ::map_manager::StaticObstacle > StaticObstaclePtr;
typedef boost::shared_ptr< ::map_manager::StaticObstacle const> StaticObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::map_manager::StaticObstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::map_manager::StaticObstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::map_manager::StaticObstacle_<ContainerAllocator1> & lhs, const ::map_manager::StaticObstacle_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.name == rhs.name &&
    lhs.id == rhs.id &&
    lhs.position == rhs.position &&
    lhs.size == rhs.size &&
    lhs.yaw == rhs.yaw &&
    lhs.semantic_class == rhs.semantic_class &&
    lhs.cost_weight == rhs.cost_weight &&
    lhs.safety_distance == rhs.safety_distance &&
    lhs.color == rhs.color;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::map_manager::StaticObstacle_<ContainerAllocator1> & lhs, const ::map_manager::StaticObstacle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace map_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::map_manager::StaticObstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::map_manager::StaticObstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::map_manager::StaticObstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::map_manager::StaticObstacle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::map_manager::StaticObstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::map_manager::StaticObstacle_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::map_manager::StaticObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2617d1f512b745b066593a9f8010262e";
  }

  static const char* value(const ::map_manager::StaticObstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2617d1f512b745b0ULL;
  static const uint64_t static_value2 = 0x66593a9f8010262eULL;
};

template<class ContainerAllocator>
struct DataType< ::map_manager::StaticObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "map_manager/StaticObstacle";
  }

  static const char* value(const ::map_manager::StaticObstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::map_manager::StaticObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"string name\n"
"uint32 id\n"
"geometry_msgs/Vector3 position\n"
"geometry_msgs/Vector3 size\n"
"float64 yaw\n"
"string semantic_class\n"
"float64 cost_weight\n"
"float64 safety_distance\n"
"std_msgs/ColorRGBA color \n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: std_msgs/ColorRGBA\n"
"float32 r\n"
"float32 g\n"
"float32 b\n"
"float32 a\n"
;
  }

  static const char* value(const ::map_manager::StaticObstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::map_manager::StaticObstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.id);
      stream.next(m.position);
      stream.next(m.size);
      stream.next(m.yaw);
      stream.next(m.semantic_class);
      stream.next(m.cost_weight);
      stream.next(m.safety_distance);
      stream.next(m.color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StaticObstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::map_manager::StaticObstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::map_manager::StaticObstacle_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "position: ";
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "size: ";
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.size);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "semantic_class: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.semantic_class);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cost_weight: ";
    Printer<double>::stream(s, indent + "  ", v.cost_weight);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "safety_distance: ";
    Printer<double>::stream(s, indent + "  ", v.safety_distance);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "color: ";
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.color);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAP_MANAGER_MESSAGE_STATICOBSTACLE_H
