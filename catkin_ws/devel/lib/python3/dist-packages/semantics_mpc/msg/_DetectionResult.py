# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from semantics_mpc/DetectionResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import semantics_mpc.msg
import std_msgs.msg

class DetectionResult(genpy.Message):
  _md5sum = "726729933eb9264d3d9e5972bf63ee93"
  _type = "semantics_mpc/DetectionResult"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# 检测结果消息定义
Header header

# 检测成功标志
bool success                # 检测是否成功
string error_message        # 错误信息

# 检测统计信息
int32 processing_time_ms    # 处理时间（毫秒）
float32 detection_frequency # 检测频率（Hz）

# 障碍物信息
ObstacleArray static_obstacles   # 静态障碍物
ObstacleArray dynamic_obstacles  # 动态障碍物 
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: semantics_mpc/ObstacleArray
# 障碍物数组消息定义
Header header

# 障碍物列表
ObstacleInfo[] obstacles    # 障碍物信息数组

# 检测元信息
int32 total_count          # 总检测到的障碍物数量
int32 static_count         # 静态障碍物数量
int32 dynamic_count        # 动态障碍物数量
float32 detection_range    # 检测范围（米）
geometry_msgs/Point sensor_position  # 传感器位置 
================================================================================
MSG: semantics_mpc/ObstacleInfo
# 障碍物信息消息定义
Header header

# 障碍物基本信息
string obstacle_id          # 障碍物ID
string obstacle_type        # 障碍物类型（静态/动态）
string semantic_class       # 语义分类（人、车、建筑物等）

# 位置和几何信息
geometry_msgs/Point position      # 位置
geometry_msgs/Vector3 size        # 尺寸 (长宽高)
geometry_msgs/Quaternion orientation  # 方向

# 运动信息（动态障碍物）
geometry_msgs/Vector3 velocity    # 速度
geometry_msgs/Vector3 acceleration # 加速度

# 置信度和检测时间
float32 confidence          # 检测置信度
float32 detection_time      # 检测时间戳 
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['header','success','error_message','processing_time_ms','detection_frequency','static_obstacles','dynamic_obstacles']
  _slot_types = ['std_msgs/Header','bool','string','int32','float32','semantics_mpc/ObstacleArray','semantics_mpc/ObstacleArray']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,success,error_message,processing_time_ms,detection_frequency,static_obstacles,dynamic_obstacles

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DetectionResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.success is None:
        self.success = False
      if self.error_message is None:
        self.error_message = ''
      if self.processing_time_ms is None:
        self.processing_time_ms = 0
      if self.detection_frequency is None:
        self.detection_frequency = 0.
      if self.static_obstacles is None:
        self.static_obstacles = semantics_mpc.msg.ObstacleArray()
      if self.dynamic_obstacles is None:
        self.dynamic_obstacles = semantics_mpc.msg.ObstacleArray()
    else:
      self.header = std_msgs.msg.Header()
      self.success = False
      self.error_message = ''
      self.processing_time_ms = 0
      self.detection_frequency = 0.
      self.static_obstacles = semantics_mpc.msg.ObstacleArray()
      self.dynamic_obstacles = semantics_mpc.msg.ObstacleArray()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.error_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_if3I().pack(_x.processing_time_ms, _x.detection_frequency, _x.static_obstacles.header.seq, _x.static_obstacles.header.stamp.secs, _x.static_obstacles.header.stamp.nsecs))
      _x = self.static_obstacles.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.static_obstacles.obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.static_obstacles.obstacles:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.obstacle_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.obstacle_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.semantic_class
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v3 = val1.position
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v4 = val1.size
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v5 = val1.orientation
        _x = _v5
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v6 = val1.velocity
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v7 = val1.acceleration
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.confidence, _x.detection_time))
      _x = self
      buff.write(_get_struct_3if3d3I().pack(_x.static_obstacles.total_count, _x.static_obstacles.static_count, _x.static_obstacles.dynamic_count, _x.static_obstacles.detection_range, _x.static_obstacles.sensor_position.x, _x.static_obstacles.sensor_position.y, _x.static_obstacles.sensor_position.z, _x.dynamic_obstacles.header.seq, _x.dynamic_obstacles.header.stamp.secs, _x.dynamic_obstacles.header.stamp.nsecs))
      _x = self.dynamic_obstacles.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.dynamic_obstacles.obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.dynamic_obstacles.obstacles:
        _v8 = val1.header
        _x = _v8.seq
        buff.write(_get_struct_I().pack(_x))
        _v9 = _v8.stamp
        _x = _v9
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v8.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.obstacle_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.obstacle_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.semantic_class
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v10 = val1.position
        _x = _v10
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v11 = val1.size
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = val1.orientation
        _x = _v12
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v13 = val1.velocity
        _x = _v13
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v14 = val1.acceleration
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.confidence, _x.detection_time))
      _x = self
      buff.write(_get_struct_3if3d().pack(_x.dynamic_obstacles.total_count, _x.dynamic_obstacles.static_count, _x.dynamic_obstacles.dynamic_count, _x.dynamic_obstacles.detection_range, _x.dynamic_obstacles.sensor_position.x, _x.dynamic_obstacles.sensor_position.y, _x.dynamic_obstacles.sensor_position.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.static_obstacles is None:
        self.static_obstacles = semantics_mpc.msg.ObstacleArray()
      if self.dynamic_obstacles is None:
        self.dynamic_obstacles = semantics_mpc.msg.ObstacleArray()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.error_message = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.processing_time_ms, _x.detection_frequency, _x.static_obstacles.header.seq, _x.static_obstacles.header.stamp.secs, _x.static_obstacles.header.stamp.nsecs,) = _get_struct_if3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.static_obstacles.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.static_obstacles.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.static_obstacles.obstacles = []
      for i in range(0, length):
        val1 = semantics_mpc.msg.ObstacleInfo()
        _v15 = val1.header
        start = end
        end += 4
        (_v15.seq,) = _get_struct_I().unpack(str[start:end])
        _v16 = _v15.stamp
        _x = _v16
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v15.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v15.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.obstacle_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.obstacle_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.obstacle_type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.obstacle_type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.semantic_class = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.semantic_class = str[start:end]
        _v17 = val1.position
        _x = _v17
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v18 = val1.size
        _x = _v18
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v19 = val1.orientation
        _x = _v19
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v20 = val1.velocity
        _x = _v20
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v21 = val1.acceleration
        _x = _v21
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.confidence, _x.detection_time,) = _get_struct_2f().unpack(str[start:end])
        self.static_obstacles.obstacles.append(val1)
      _x = self
      start = end
      end += 52
      (_x.static_obstacles.total_count, _x.static_obstacles.static_count, _x.static_obstacles.dynamic_count, _x.static_obstacles.detection_range, _x.static_obstacles.sensor_position.x, _x.static_obstacles.sensor_position.y, _x.static_obstacles.sensor_position.z, _x.dynamic_obstacles.header.seq, _x.dynamic_obstacles.header.stamp.secs, _x.dynamic_obstacles.header.stamp.nsecs,) = _get_struct_3if3d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dynamic_obstacles.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dynamic_obstacles.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dynamic_obstacles.obstacles = []
      for i in range(0, length):
        val1 = semantics_mpc.msg.ObstacleInfo()
        _v22 = val1.header
        start = end
        end += 4
        (_v22.seq,) = _get_struct_I().unpack(str[start:end])
        _v23 = _v22.stamp
        _x = _v23
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v22.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v22.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.obstacle_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.obstacle_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.obstacle_type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.obstacle_type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.semantic_class = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.semantic_class = str[start:end]
        _v24 = val1.position
        _x = _v24
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v25 = val1.size
        _x = _v25
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v26 = val1.orientation
        _x = _v26
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v27 = val1.velocity
        _x = _v27
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v28 = val1.acceleration
        _x = _v28
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.confidence, _x.detection_time,) = _get_struct_2f().unpack(str[start:end])
        self.dynamic_obstacles.obstacles.append(val1)
      _x = self
      start = end
      end += 40
      (_x.dynamic_obstacles.total_count, _x.dynamic_obstacles.static_count, _x.dynamic_obstacles.dynamic_count, _x.dynamic_obstacles.detection_range, _x.dynamic_obstacles.sensor_position.x, _x.dynamic_obstacles.sensor_position.y, _x.dynamic_obstacles.sensor_position.z,) = _get_struct_3if3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.error_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_if3I().pack(_x.processing_time_ms, _x.detection_frequency, _x.static_obstacles.header.seq, _x.static_obstacles.header.stamp.secs, _x.static_obstacles.header.stamp.nsecs))
      _x = self.static_obstacles.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.static_obstacles.obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.static_obstacles.obstacles:
        _v29 = val1.header
        _x = _v29.seq
        buff.write(_get_struct_I().pack(_x))
        _v30 = _v29.stamp
        _x = _v30
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v29.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.obstacle_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.obstacle_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.semantic_class
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v31 = val1.position
        _x = _v31
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v32 = val1.size
        _x = _v32
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v33 = val1.orientation
        _x = _v33
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v34 = val1.velocity
        _x = _v34
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v35 = val1.acceleration
        _x = _v35
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.confidence, _x.detection_time))
      _x = self
      buff.write(_get_struct_3if3d3I().pack(_x.static_obstacles.total_count, _x.static_obstacles.static_count, _x.static_obstacles.dynamic_count, _x.static_obstacles.detection_range, _x.static_obstacles.sensor_position.x, _x.static_obstacles.sensor_position.y, _x.static_obstacles.sensor_position.z, _x.dynamic_obstacles.header.seq, _x.dynamic_obstacles.header.stamp.secs, _x.dynamic_obstacles.header.stamp.nsecs))
      _x = self.dynamic_obstacles.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.dynamic_obstacles.obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.dynamic_obstacles.obstacles:
        _v36 = val1.header
        _x = _v36.seq
        buff.write(_get_struct_I().pack(_x))
        _v37 = _v36.stamp
        _x = _v37
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v36.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.obstacle_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.obstacle_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.semantic_class
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v38 = val1.position
        _x = _v38
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v39 = val1.size
        _x = _v39
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v40 = val1.orientation
        _x = _v40
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v41 = val1.velocity
        _x = _v41
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v42 = val1.acceleration
        _x = _v42
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.confidence, _x.detection_time))
      _x = self
      buff.write(_get_struct_3if3d().pack(_x.dynamic_obstacles.total_count, _x.dynamic_obstacles.static_count, _x.dynamic_obstacles.dynamic_count, _x.dynamic_obstacles.detection_range, _x.dynamic_obstacles.sensor_position.x, _x.dynamic_obstacles.sensor_position.y, _x.dynamic_obstacles.sensor_position.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.static_obstacles is None:
        self.static_obstacles = semantics_mpc.msg.ObstacleArray()
      if self.dynamic_obstacles is None:
        self.dynamic_obstacles = semantics_mpc.msg.ObstacleArray()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.error_message = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.processing_time_ms, _x.detection_frequency, _x.static_obstacles.header.seq, _x.static_obstacles.header.stamp.secs, _x.static_obstacles.header.stamp.nsecs,) = _get_struct_if3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.static_obstacles.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.static_obstacles.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.static_obstacles.obstacles = []
      for i in range(0, length):
        val1 = semantics_mpc.msg.ObstacleInfo()
        _v43 = val1.header
        start = end
        end += 4
        (_v43.seq,) = _get_struct_I().unpack(str[start:end])
        _v44 = _v43.stamp
        _x = _v44
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v43.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v43.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.obstacle_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.obstacle_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.obstacle_type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.obstacle_type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.semantic_class = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.semantic_class = str[start:end]
        _v45 = val1.position
        _x = _v45
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v46 = val1.size
        _x = _v46
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v47 = val1.orientation
        _x = _v47
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v48 = val1.velocity
        _x = _v48
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v49 = val1.acceleration
        _x = _v49
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.confidence, _x.detection_time,) = _get_struct_2f().unpack(str[start:end])
        self.static_obstacles.obstacles.append(val1)
      _x = self
      start = end
      end += 52
      (_x.static_obstacles.total_count, _x.static_obstacles.static_count, _x.static_obstacles.dynamic_count, _x.static_obstacles.detection_range, _x.static_obstacles.sensor_position.x, _x.static_obstacles.sensor_position.y, _x.static_obstacles.sensor_position.z, _x.dynamic_obstacles.header.seq, _x.dynamic_obstacles.header.stamp.secs, _x.dynamic_obstacles.header.stamp.nsecs,) = _get_struct_3if3d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dynamic_obstacles.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dynamic_obstacles.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dynamic_obstacles.obstacles = []
      for i in range(0, length):
        val1 = semantics_mpc.msg.ObstacleInfo()
        _v50 = val1.header
        start = end
        end += 4
        (_v50.seq,) = _get_struct_I().unpack(str[start:end])
        _v51 = _v50.stamp
        _x = _v51
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v50.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v50.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.obstacle_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.obstacle_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.obstacle_type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.obstacle_type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.semantic_class = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.semantic_class = str[start:end]
        _v52 = val1.position
        _x = _v52
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v53 = val1.size
        _x = _v53
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v54 = val1.orientation
        _x = _v54
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v55 = val1.velocity
        _x = _v55
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v56 = val1.acceleration
        _x = _v56
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.confidence, _x.detection_time,) = _get_struct_2f().unpack(str[start:end])
        self.dynamic_obstacles.obstacles.append(val1)
      _x = self
      start = end
      end += 40
      (_x.dynamic_obstacles.total_count, _x.dynamic_obstacles.static_count, _x.dynamic_obstacles.dynamic_count, _x.dynamic_obstacles.detection_range, _x.dynamic_obstacles.sensor_position.x, _x.dynamic_obstacles.sensor_position.y, _x.dynamic_obstacles.sensor_position.z,) = _get_struct_3if3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3if3d = None
def _get_struct_3if3d():
    global _struct_3if3d
    if _struct_3if3d is None:
        _struct_3if3d = struct.Struct("<3if3d")
    return _struct_3if3d
_struct_3if3d3I = None
def _get_struct_3if3d3I():
    global _struct_3if3d3I
    if _struct_3if3d3I is None:
        _struct_3if3d3I = struct.Struct("<3if3d3I")
    return _struct_3if3d3I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_if3I = None
def _get_struct_if3I():
    global _struct_if3I
    if _struct_if3I is None:
        _struct_if3I = struct.Struct("<if3I")
    return _struct_if3I
