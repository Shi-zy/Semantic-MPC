# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from semantics_mpc/GetStaticObstaclesRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class GetStaticObstaclesRequest(genpy.Message):
  _md5sum = "7c1b27c5a3aca6a7557c5606465c733c"
  _type = "semantics_mpc/GetStaticObstaclesRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# 获取静态障碍物服务定义

# 请求
string frame_id             # 坐标系ID
geometry_msgs/Point center  # 查询中心点
float32 range              # 查询范围（米，-1表示全部）
bool include_walls         # 是否包含墙壁
bool include_buildings     # 是否包含建筑物
bool include_objects       # 是否包含物体


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['frame_id','center','range','include_walls','include_buildings','include_objects']
  _slot_types = ['string','geometry_msgs/Point','float32','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       frame_id,center,range,include_walls,include_buildings,include_objects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetStaticObstaclesRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.frame_id is None:
        self.frame_id = ''
      if self.center is None:
        self.center = geometry_msgs.msg.Point()
      if self.range is None:
        self.range = 0.
      if self.include_walls is None:
        self.include_walls = False
      if self.include_buildings is None:
        self.include_buildings = False
      if self.include_objects is None:
        self.include_objects = False
    else:
      self.frame_id = ''
      self.center = geometry_msgs.msg.Point()
      self.range = 0.
      self.include_walls = False
      self.include_buildings = False
      self.include_objects = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3df3B().pack(_x.center.x, _x.center.y, _x.center.z, _x.range, _x.include_walls, _x.include_buildings, _x.include_objects))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.center is None:
        self.center = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_id = str[start:end]
      _x = self
      start = end
      end += 31
      (_x.center.x, _x.center.y, _x.center.z, _x.range, _x.include_walls, _x.include_buildings, _x.include_objects,) = _get_struct_3df3B().unpack(str[start:end])
      self.include_walls = bool(self.include_walls)
      self.include_buildings = bool(self.include_buildings)
      self.include_objects = bool(self.include_objects)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3df3B().pack(_x.center.x, _x.center.y, _x.center.z, _x.range, _x.include_walls, _x.include_buildings, _x.include_objects))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.center is None:
        self.center = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_id = str[start:end]
      _x = self
      start = end
      end += 31
      (_x.center.x, _x.center.y, _x.center.z, _x.range, _x.include_walls, _x.include_buildings, _x.include_objects,) = _get_struct_3df3B().unpack(str[start:end])
      self.include_walls = bool(self.include_walls)
      self.include_buildings = bool(self.include_buildings)
      self.include_objects = bool(self.include_objects)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3df3B = None
def _get_struct_3df3B():
    global _struct_3df3B
    if _struct_3df3B is None:
        _struct_3df3B = struct.Struct("<3df3B")
    return _struct_3df3B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from semantics_mpc/GetStaticObstaclesResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import semantics_mpc.msg
import std_msgs.msg

class GetStaticObstaclesResponse(genpy.Message):
  _md5sum = "674c60d8d5d08f13a9ca9c396cdb19e0"
  _type = "semantics_mpc/GetStaticObstaclesResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# 响应
bool success               # 服务调用是否成功
string message            # 返回信息
ObstacleArray obstacles   # 静态障碍物列表
int32 total_count         # 总数量 

================================================================================
MSG: semantics_mpc/ObstacleArray
# 障碍物数组消息定义
Header header

# 障碍物列表
ObstacleInfo[] obstacles    # 障碍物信息数组

# 检测元信息
int32 total_count          # 总检测到的障碍物数量
int32 static_count         # 静态障碍物数量
int32 dynamic_count        # 动态障碍物数量
float32 detection_range    # 检测范围（米）
geometry_msgs/Point sensor_position  # 传感器位置 
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: semantics_mpc/ObstacleInfo
# 障碍物信息消息定义
Header header

# 障碍物基本信息
string obstacle_id          # 障碍物ID
string obstacle_type        # 障碍物类型（静态/动态）
string semantic_class       # 语义分类（人、车、建筑物等）

# 位置和几何信息
geometry_msgs/Point position      # 位置
geometry_msgs/Vector3 size        # 尺寸 (长宽高)
geometry_msgs/Quaternion orientation  # 方向

# 运动信息（动态障碍物）
geometry_msgs/Vector3 velocity    # 速度
geometry_msgs/Vector3 acceleration # 加速度

# 置信度和检测时间
float32 confidence          # 检测置信度
float32 detection_time      # 检测时间戳 
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['success','message','obstacles','total_count']
  _slot_types = ['bool','string','semantics_mpc/ObstacleArray','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,message,obstacles,total_count

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetStaticObstaclesResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.message is None:
        self.message = ''
      if self.obstacles is None:
        self.obstacles = semantics_mpc.msg.ObstacleArray()
      if self.total_count is None:
        self.total_count = 0
    else:
      self.success = False
      self.message = ''
      self.obstacles = semantics_mpc.msg.ObstacleArray()
      self.total_count = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.obstacles.header.seq, _x.obstacles.header.stamp.secs, _x.obstacles.header.stamp.nsecs))
      _x = self.obstacles.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.obstacles.obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacles.obstacles:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.obstacle_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.obstacle_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.semantic_class
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v3 = val1.position
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v4 = val1.size
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v5 = val1.orientation
        _x = _v5
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v6 = val1.velocity
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v7 = val1.acceleration
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.confidence, _x.detection_time))
      _x = self
      buff.write(_get_struct_3if3di().pack(_x.obstacles.total_count, _x.obstacles.static_count, _x.obstacles.dynamic_count, _x.obstacles.detection_range, _x.obstacles.sensor_position.x, _x.obstacles.sensor_position.y, _x.obstacles.sensor_position.z, _x.total_count))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.obstacles is None:
        self.obstacles = semantics_mpc.msg.ObstacleArray()
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.obstacles.header.seq, _x.obstacles.header.stamp.secs, _x.obstacles.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.obstacles.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.obstacles.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacles.obstacles = []
      for i in range(0, length):
        val1 = semantics_mpc.msg.ObstacleInfo()
        _v8 = val1.header
        start = end
        end += 4
        (_v8.seq,) = _get_struct_I().unpack(str[start:end])
        _v9 = _v8.stamp
        _x = _v9
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v8.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v8.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.obstacle_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.obstacle_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.obstacle_type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.obstacle_type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.semantic_class = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.semantic_class = str[start:end]
        _v10 = val1.position
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v11 = val1.size
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v12 = val1.orientation
        _x = _v12
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v13 = val1.velocity
        _x = _v13
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v14 = val1.acceleration
        _x = _v14
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.confidence, _x.detection_time,) = _get_struct_2f().unpack(str[start:end])
        self.obstacles.obstacles.append(val1)
      _x = self
      start = end
      end += 44
      (_x.obstacles.total_count, _x.obstacles.static_count, _x.obstacles.dynamic_count, _x.obstacles.detection_range, _x.obstacles.sensor_position.x, _x.obstacles.sensor_position.y, _x.obstacles.sensor_position.z, _x.total_count,) = _get_struct_3if3di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.obstacles.header.seq, _x.obstacles.header.stamp.secs, _x.obstacles.header.stamp.nsecs))
      _x = self.obstacles.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.obstacles.obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacles.obstacles:
        _v15 = val1.header
        _x = _v15.seq
        buff.write(_get_struct_I().pack(_x))
        _v16 = _v15.stamp
        _x = _v16
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v15.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.obstacle_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.obstacle_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.semantic_class
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v17 = val1.position
        _x = _v17
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v18 = val1.size
        _x = _v18
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v19 = val1.orientation
        _x = _v19
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v20 = val1.velocity
        _x = _v20
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v21 = val1.acceleration
        _x = _v21
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.confidence, _x.detection_time))
      _x = self
      buff.write(_get_struct_3if3di().pack(_x.obstacles.total_count, _x.obstacles.static_count, _x.obstacles.dynamic_count, _x.obstacles.detection_range, _x.obstacles.sensor_position.x, _x.obstacles.sensor_position.y, _x.obstacles.sensor_position.z, _x.total_count))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.obstacles is None:
        self.obstacles = semantics_mpc.msg.ObstacleArray()
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.obstacles.header.seq, _x.obstacles.header.stamp.secs, _x.obstacles.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.obstacles.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.obstacles.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacles.obstacles = []
      for i in range(0, length):
        val1 = semantics_mpc.msg.ObstacleInfo()
        _v22 = val1.header
        start = end
        end += 4
        (_v22.seq,) = _get_struct_I().unpack(str[start:end])
        _v23 = _v22.stamp
        _x = _v23
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v22.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v22.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.obstacle_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.obstacle_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.obstacle_type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.obstacle_type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.semantic_class = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.semantic_class = str[start:end]
        _v24 = val1.position
        _x = _v24
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v25 = val1.size
        _x = _v25
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v26 = val1.orientation
        _x = _v26
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v27 = val1.velocity
        _x = _v27
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v28 = val1.acceleration
        _x = _v28
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.confidence, _x.detection_time,) = _get_struct_2f().unpack(str[start:end])
        self.obstacles.obstacles.append(val1)
      _x = self
      start = end
      end += 44
      (_x.obstacles.total_count, _x.obstacles.static_count, _x.obstacles.dynamic_count, _x.obstacles.detection_range, _x.obstacles.sensor_position.x, _x.obstacles.sensor_position.y, _x.obstacles.sensor_position.z, _x.total_count,) = _get_struct_3if3di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3if3di = None
def _get_struct_3if3di():
    global _struct_3if3di
    if _struct_3if3di is None:
        _struct_3if3di = struct.Struct("<3if3di")
    return _struct_3if3di
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class GetStaticObstacles(object):
  _type          = 'semantics_mpc/GetStaticObstacles'
  _md5sum = 'f586077451073792efa34a9091d1d282'
  _request_class  = GetStaticObstaclesRequest
  _response_class = GetStaticObstaclesResponse
